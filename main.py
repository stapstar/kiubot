import os
import asyncio
import random
import logging
import nlpcloud
import pyodbc
from aiogram import types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8042649082:AAGLXq9BdVoqA7K9fuWxE6ZhChVA-yR34Jw"
NLP_CLOUD_API_KEY = "acb3d97c7de7455bbdaaaa1d8559b4b00a353076"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ NLP Cloud
client = nlpcloud.Client(
    "nllb-200-3-3b",
    NLP_CLOUD_API_KEY,
    gpu=False,
)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")],
    [KeyboardButton(text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
    [KeyboardButton(text="üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")],
    [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
], resize_keyboard=True)


# === –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ===
class BotStates(StatesGroup):
    translating = State()
    quiz = State()


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server ===
def get_sql_connection():
    try:
        conn = pyodbc.connect(
            'DRIVER={ODBC Driver 17 for SQL Server};'
            'SERVER=localhost;'
            'DATABASE=KamillaTranslateBot;'
            'UID=marco_user;'
            'PWD=Dabro158;'
            'Encrypt=no;'
        )
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return conn
    except pyodbc.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server: {str(e)}")
        raise


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def get_or_create_user(user_id: int, username: str) -> int:
    conn = None
    cursor = None
    try:
        conn = get_sql_connection()
        cursor = conn.cursor()
        telegram_id = str(user_id)
        safe_username = str(username) if username else f"user_{user_id}"
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: TelegramID={telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT UserID FROM Users WHERE TelegramID = ?", (telegram_id,))
        result = cursor.fetchone()
        if result:
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result[0]}")
            return result[0]

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO Users (TelegramID, Username) OUTPUT INSERTED.UserID VALUES (?, ?)",
            (telegram_id, safe_username)
        )
        user_id_db = cursor.fetchone()[0]
        conn.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id_db}")
        return user_id_db
    except pyodbc.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ NLP Cloud API ===
async def translate_text(text: str) -> str:
    try:
        logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {text}")
        response = client.translation(
            text,
            source="rus_Cyrl",
            target="eng_Latn"
        )
        translation = response.get("translation_text", "")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {translation}")
        return translation
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        logger.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        user_db_id = get_or_create_user(user_id, username)
        await state.update_data(user_db_id=user_db_id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_kb
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_db_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")


@dp.message(lambda m: m.text == "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
async def start_translate(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(BotStates.translating)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–µ—Ä–µ–≤–æ–¥")


@dp.message(BotStates.translating)
async def process_translate(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º user_db_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        user_db_id = get_or_create_user(user_id, username)
        text = message.text.strip()
        translation = await translate_text(text)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        with get_sql_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO Translations (UserID, OriginalText, TranslatedText) OUTPUT INSERTED.TranslationID VALUES (?, ?, ?)",
                (user_db_id, text, translation)
            )
            translation_id = cursor.fetchone()[0]
            conn.commit()

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save:{translation_id}")]
        ])
        await message.answer(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translation}", reply_markup=save_button)

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")


# === –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏ ===
@dp.callback_query(lambda c: c.data.startswith("save:"))
async def save_to_bookmark(callback_query: types.CallbackQuery):
    translation_id = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user_{user_id}"

    try:
        user_db_id = get_or_create_user(user_id, username)

        with get_sql_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT OriginalText, TranslatedText FROM Translations WHERE TranslationID = ?",
                           (translation_id,))
            result = cursor.fetchone()
            if not result:
                await callback_query.answer("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            word, translation = result
            cursor.execute(
                "INSERT INTO Bookmarks (UserID, Word, Translation) VALUES (?, ?, ?)",
                (user_db_id, word, translation)
            )
            conn.commit()
        await callback_query.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


# === –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏ ===
@dp.message(lambda m: m.text == "üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
async def show_bookmarks(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    try:
        user_db_id = get_or_create_user(user_id, username)

        with get_sql_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT Word, Translation FROM Bookmarks WHERE UserID = ?", user_db_id)
            bookmarks = cursor.fetchall()

            if not bookmarks:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫.")
                return

            text = "\n".join([f"{w} ‚Üí {t}" for w, t in bookmarks])
            await message.answer(f"–í–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏:\n{text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫")


# === –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.message(lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    try:
        user_db_id = get_or_create_user(user_id, username)

        with get_sql_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM Translations WHERE UserID = ?", user_db_id)
            total_translations = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM Bookmarks WHERE UserID = ?", user_db_id)
            total_bookmarks = cursor.fetchone()[0]

            cursor.execute("""
                SELECT AVG(CAST(CorrectAnswers AS FLOAT)/TotalQuestions)*100 
                FROM QuizResults WHERE UserID = ?
            """, user_db_id)
            accuracy = cursor.fetchone()[0] or 0

        await message.answer(
            f"üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üåê –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
            f"üîñ –ó–∞–∫–ª–∞–¥–æ–∫: {total_bookmarks}\n"
            f"üß† –¢–æ—á–Ω–æ—Å—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω: {accuracy:.1f}%"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(F.text == "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    try:
        user_db_id = get_or_create_user(user_id, username)

        with get_sql_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT TOP 10 EnWord, RuWord, Option1, Option2 
                FROM QuizWords 
                ORDER BY NEWID()
            """)
            questions = cursor.fetchall()

            if len(questions) != 10:  # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
                await message.answer(f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω—É–∂–Ω–æ 10)")
                return

            await state.update_data(
                quiz_questions=questions.copy(),
                correct_answers=0,
                total_questions=0,  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                user_db_id=user_db_id
            )
            await ask_next_question(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


async def ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["quiz_questions"]

    if not questions:
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = (
            f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {data['correct_answers']} –∏–∑ {data['total_questions']}"
        )
        await message.answer(result_text)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await asyncio.to_thread(save_quiz_result, data)
        await state.clear()
        return

    en, ru, opt1, opt2 = questions.pop(0)  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
    options = [ru, opt1, opt2]
    random.shuffle(options)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(
        quiz_questions=questions,
        total_questions=data["total_questions"] + 1,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
        current_question=(en, ru)
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"quiz:{en}:{opt}")]
        for opt in options
    ])

    await message.answer(f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{en}'?", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("quiz:"))
async def handle_quiz_answer(callback: types.CallbackQuery, state: FSMContext):
    _, en, selected = callback.data.split(":", 2)
    data = await state.get_data()
    correct_answer = data["current_question"][1]
    is_correct = (selected == correct_answer)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(
        correct_answers=data["correct_answers"] + (1 if is_correct else 0)
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            f"{'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if is_correct else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} "
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}",
            reply_markup=None
        )
    except TelegramBadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(1.5)
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_next_question(callback.message, state)


def save_quiz_result(data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    conn = get_sql_connection()
    try:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO QuizResults (UserID, CorrectAnswers, TotalQuestions) VALUES (?, ?, ?)",
            (data["user_db_id"], data["correct_answers"], data["total_questions"])
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    finally:
        conn.close()


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())